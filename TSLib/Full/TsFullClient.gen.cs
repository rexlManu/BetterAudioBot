// TSLib - A free TeamSpeak 3 and 5 client library
// Copyright (C) 2017  TSLib contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.
// <auto-generated />
















using System;
using TSLib.Helper;
using TSLib.Messages;

namespace TSLib.Full
{
	public sealed partial class TsFullClient
	{
		
		public event NotifyEventHandler<BanList> OnBanList;
		public event EventHandler<BanList> OnEachBanList;
		public event NotifyEventHandler<ChannelChanged> OnChannelChanged;
		public event EventHandler<ChannelChanged> OnEachChannelChanged;
		public event NotifyEventHandler<ChannelClientPermList> OnChannelClientPermList;
		public event EventHandler<ChannelClientPermList> OnEachChannelClientPermList;
		public event NotifyEventHandler<ChannelCreated> OnChannelCreated;
		public event EventHandler<ChannelCreated> OnEachChannelCreated;
		public event NotifyEventHandler<ChannelDeleted> OnChannelDeleted;
		public event EventHandler<ChannelDeleted> OnEachChannelDeleted;
		public event NotifyEventHandler<ChannelDescriptionChanged> OnChannelDescriptionChanged;
		public event EventHandler<ChannelDescriptionChanged> OnEachChannelDescriptionChanged;
		public event NotifyEventHandler<ChannelEdited> OnChannelEdited;
		public event EventHandler<ChannelEdited> OnEachChannelEdited;
		public event NotifyEventHandler<ChannelGroupClientList> OnChannelGroupClientList;
		public event EventHandler<ChannelGroupClientList> OnEachChannelGroupClientList;
		public event NotifyEventHandler<ChannelGroupList> OnChannelGroupList;
		public event EventHandler<ChannelGroupList> OnEachChannelGroupList;
		public event NotifyEventHandler<ChannelGroupPermList> OnChannelGroupPermList;
		public event EventHandler<ChannelGroupPermList> OnEachChannelGroupPermList;
		public event NotifyEventHandler<ChannelList> OnChannelList;
		public event EventHandler<ChannelList> OnEachChannelList;
		public event NotifyEventHandler<ChannelListFinished> OnChannelListFinished;
		public event EventHandler<ChannelListFinished> OnEachChannelListFinished;
		public event NotifyEventHandler<ChannelMoved> OnChannelMoved;
		public event EventHandler<ChannelMoved> OnEachChannelMoved;
		public event NotifyEventHandler<ChannelPasswordChanged> OnChannelPasswordChanged;
		public event EventHandler<ChannelPasswordChanged> OnEachChannelPasswordChanged;
		public event NotifyEventHandler<ChannelPermissionHints> OnChannelPermissionHints;
		public event EventHandler<ChannelPermissionHints> OnEachChannelPermissionHints;
		public event NotifyEventHandler<ChannelPermList> OnChannelPermList;
		public event EventHandler<ChannelPermList> OnEachChannelPermList;
		public event NotifyEventHandler<ChannelSubscribed> OnChannelSubscribed;
		public event EventHandler<ChannelSubscribed> OnEachChannelSubscribed;
		public event NotifyEventHandler<ChannelUnsubscribed> OnChannelUnsubscribed;
		public event EventHandler<ChannelUnsubscribed> OnEachChannelUnsubscribed;
		public event NotifyEventHandler<ClientChannelGroupChanged> OnClientChannelGroupChanged;
		public event EventHandler<ClientChannelGroupChanged> OnEachClientChannelGroupChanged;
		public event NotifyEventHandler<ClientChatClosed> OnClientChatClosed;
		public event EventHandler<ClientChatClosed> OnEachClientChatClosed;
		public event NotifyEventHandler<ClientChatComposing> OnClientChatComposing;
		public event EventHandler<ClientChatComposing> OnEachClientChatComposing;
		public event NotifyEventHandler<ClientConnectionInfo> OnClientConnectionInfo;
		public event EventHandler<ClientConnectionInfo> OnEachClientConnectionInfo;
		public event NotifyEventHandler<ClientConnectionInfoUpdateRequest> OnClientConnectionInfoUpdateRequest;
		public event EventHandler<ClientConnectionInfoUpdateRequest> OnEachClientConnectionInfoUpdateRequest;
		public event NotifyEventHandler<ClientDbFind> OnClientDbFind;
		public event EventHandler<ClientDbFind> OnEachClientDbFind;
		public event NotifyEventHandler<ClientDbIdFromUid> OnClientDbIdFromUid;
		public event EventHandler<ClientDbIdFromUid> OnEachClientDbIdFromUid;
		public event NotifyEventHandler<ClientDbList> OnClientDbList;
		public event EventHandler<ClientDbList> OnEachClientDbList;
		public override event NotifyEventHandler<ClientEnterView> OnClientEnterView;
		public event EventHandler<ClientEnterView> OnEachClientEnterView;
		public event NotifyEventHandler<ClientIds> OnClientIds;
		public event EventHandler<ClientIds> OnEachClientIds;
		public override event NotifyEventHandler<ClientLeftView> OnClientLeftView;
		public event EventHandler<ClientLeftView> OnEachClientLeftView;
		public event NotifyEventHandler<ClientMoved> OnClientMoved;
		public event EventHandler<ClientMoved> OnEachClientMoved;
		public event NotifyEventHandler<ClientNameFromDbId> OnClientNameFromDbId;
		public event EventHandler<ClientNameFromDbId> OnEachClientNameFromDbId;
		public event NotifyEventHandler<ClientNameFromUid> OnClientNameFromUid;
		public event EventHandler<ClientNameFromUid> OnEachClientNameFromUid;
		public event NotifyEventHandler<ClientNeededPermissions> OnClientNeededPermissions;
		public event EventHandler<ClientNeededPermissions> OnEachClientNeededPermissions;
		public event NotifyEventHandler<ClientPermissionHints> OnClientPermissionHints;
		public event EventHandler<ClientPermissionHints> OnEachClientPermissionHints;
		public event NotifyEventHandler<ClientPermList> OnClientPermList;
		public event EventHandler<ClientPermList> OnEachClientPermList;
		public event NotifyEventHandler<ClientPoke> OnClientPoke;
		public event EventHandler<ClientPoke> OnEachClientPoke;
		public event NotifyEventHandler<ClientServerGroupAdded> OnClientServerGroupAdded;
		public event EventHandler<ClientServerGroupAdded> OnEachClientServerGroupAdded;
		public event NotifyEventHandler<ClientServerGroupRemoved> OnClientServerGroupRemoved;
		public event EventHandler<ClientServerGroupRemoved> OnEachClientServerGroupRemoved;
		public event NotifyEventHandler<ClientSetServerQueryLogin> OnClientSetServerQueryLogin;
		public event EventHandler<ClientSetServerQueryLogin> OnEachClientSetServerQueryLogin;
		public event NotifyEventHandler<ClientUidFromClid> OnClientUidFromClid;
		public event EventHandler<ClientUidFromClid> OnEachClientUidFromClid;
		public event NotifyEventHandler<ClientUpdated> OnClientUpdated;
		public event EventHandler<ClientUpdated> OnEachClientUpdated;
		public event NotifyEventHandler<CommandError> OnCommandError;
		public event EventHandler<CommandError> OnEachCommandError;
		public event NotifyEventHandler<ComplainList> OnComplainList;
		public event EventHandler<ComplainList> OnEachComplainList;
		public event NotifyEventHandler<FileDownload> OnFileDownload;
		public event EventHandler<FileDownload> OnEachFileDownload;
		public event NotifyEventHandler<FileInfo> OnFileInfo;
		public event EventHandler<FileInfo> OnEachFileInfo;
		public event NotifyEventHandler<FileList> OnFileList;
		public event EventHandler<FileList> OnEachFileList;
		public event NotifyEventHandler<FileListFinished> OnFileListFinished;
		public event EventHandler<FileListFinished> OnEachFileListFinished;
		public event NotifyEventHandler<FileTransfer> OnFileTransfer;
		public event EventHandler<FileTransfer> OnEachFileTransfer;
		public event NotifyEventHandler<FileTransferStatus> OnFileTransferStatus;
		public event EventHandler<FileTransferStatus> OnEachFileTransferStatus;
		public event NotifyEventHandler<FileUpload> OnFileUpload;
		public event EventHandler<FileUpload> OnEachFileUpload;
		public event NotifyEventHandler<InitIvExpand> OnInitIvExpand;
		public event EventHandler<InitIvExpand> OnEachInitIvExpand;
		public event NotifyEventHandler<InitIvExpand2> OnInitIvExpand2;
		public event EventHandler<InitIvExpand2> OnEachInitIvExpand2;
		public event NotifyEventHandler<InitServer> OnInitServer;
		public event EventHandler<InitServer> OnEachInitServer;
		public event NotifyEventHandler<OfflineMessage> OnOfflineMessage;
		public event EventHandler<OfflineMessage> OnEachOfflineMessage;
		public event NotifyEventHandler<OfflineMessageList> OnOfflineMessageList;
		public event EventHandler<OfflineMessageList> OnEachOfflineMessageList;
		public event NotifyEventHandler<PermFind> OnPermFind;
		public event EventHandler<PermFind> OnEachPermFind;
		public event NotifyEventHandler<PermList> OnPermList;
		public event EventHandler<PermList> OnEachPermList;
		public event NotifyEventHandler<PermOverview> OnPermOverview;
		public event EventHandler<PermOverview> OnEachPermOverview;
		public event NotifyEventHandler<PluginCommand> OnPluginCommand;
		public event EventHandler<PluginCommand> OnEachPluginCommand;
		public event NotifyEventHandler<ServerConnectionInfo> OnServerConnectionInfo;
		public event EventHandler<ServerConnectionInfo> OnEachServerConnectionInfo;
		public event NotifyEventHandler<ServerEdited> OnServerEdited;
		public event EventHandler<ServerEdited> OnEachServerEdited;
		public event NotifyEventHandler<ServerGroupClientList> OnServerGroupClientList;
		public event EventHandler<ServerGroupClientList> OnEachServerGroupClientList;
		public event NotifyEventHandler<ServerGroupList> OnServerGroupList;
		public event EventHandler<ServerGroupList> OnEachServerGroupList;
		public event NotifyEventHandler<ServerGroupPermList> OnServerGroupPermList;
		public event EventHandler<ServerGroupPermList> OnEachServerGroupPermList;
		public event NotifyEventHandler<ServerGroupsByClientId> OnServerGroupsByClientId;
		public event EventHandler<ServerGroupsByClientId> OnEachServerGroupsByClientId;
		public event NotifyEventHandler<ServerLog> OnServerLog;
		public event EventHandler<ServerLog> OnEachServerLog;
		public event NotifyEventHandler<ServerTempPasswordList> OnServerTempPasswordList;
		public event EventHandler<ServerTempPasswordList> OnEachServerTempPasswordList;
		public event NotifyEventHandler<ServerUpdated> OnServerUpdated;
		public event EventHandler<ServerUpdated> OnEachServerUpdated;
		public override event NotifyEventHandler<TextMessage> OnTextMessage;
		public event EventHandler<TextMessage> OnEachTextMessage;
		public event NotifyEventHandler<TokenAdd> OnTokenAdd;
		public event EventHandler<TokenAdd> OnEachTokenAdd;
		public event NotifyEventHandler<TokenList> OnTokenList;
		public event EventHandler<TokenList> OnEachTokenList;
		public event NotifyEventHandler<TokenUsed> OnTokenUsed;
		public event EventHandler<TokenUsed> OnEachTokenUsed;


		private void InvokeEvent(LazyNotification lazyNotification)
		{
			var ntf = lazyNotification.Notifications;
			switch (lazyNotification.NotifyType)
			{
			
			case NotificationType.BanList: {
				var ntfc = (BanList[])ntf;
				ProcessBanList(ntfc);
				OnBanList?.Invoke(this, ntfc);
				var ev = OnEachBanList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachBanList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelChanged: {
				var ntfc = (ChannelChanged[])ntf;
				ProcessChannelChanged(ntfc);
				OnChannelChanged?.Invoke(this, ntfc);
				var ev = OnEachChannelChanged;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachChannelChanged(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelClientPermList: {
				var ntfc = (ChannelClientPermList[])ntf;
				ProcessChannelClientPermList(ntfc);
				OnChannelClientPermList?.Invoke(this, ntfc);
				var ev = OnEachChannelClientPermList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachChannelClientPermList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelCreated: {
				var ntfc = (ChannelCreated[])ntf;
				ProcessChannelCreated(ntfc);
				OnChannelCreated?.Invoke(this, ntfc);
				var ev = OnEachChannelCreated;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateChannelCreated(that);
					ProcessEachChannelCreated(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelDeleted: {
				var ntfc = (ChannelDeleted[])ntf;
				ProcessChannelDeleted(ntfc);
				OnChannelDeleted?.Invoke(this, ntfc);
				var ev = OnEachChannelDeleted;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateChannelDeleted(that);
					ProcessEachChannelDeleted(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelDescriptionChanged: {
				var ntfc = (ChannelDescriptionChanged[])ntf;
				ProcessChannelDescriptionChanged(ntfc);
				OnChannelDescriptionChanged?.Invoke(this, ntfc);
				var ev = OnEachChannelDescriptionChanged;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachChannelDescriptionChanged(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelEdited: {
				var ntfc = (ChannelEdited[])ntf;
				ProcessChannelEdited(ntfc);
				OnChannelEdited?.Invoke(this, ntfc);
				var ev = OnEachChannelEdited;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateChannelEdited(that);
					ProcessEachChannelEdited(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelGroupClientList: {
				var ntfc = (ChannelGroupClientList[])ntf;
				ProcessChannelGroupClientList(ntfc);
				OnChannelGroupClientList?.Invoke(this, ntfc);
				var ev = OnEachChannelGroupClientList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachChannelGroupClientList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelGroupList: {
				var ntfc = (ChannelGroupList[])ntf;
				ProcessChannelGroupList(ntfc);
				OnChannelGroupList?.Invoke(this, ntfc);
				var ev = OnEachChannelGroupList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachChannelGroupList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelGroupPermList: {
				var ntfc = (ChannelGroupPermList[])ntf;
				ProcessChannelGroupPermList(ntfc);
				OnChannelGroupPermList?.Invoke(this, ntfc);
				var ev = OnEachChannelGroupPermList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachChannelGroupPermList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelList: {
				var ntfc = (ChannelList[])ntf;
				ProcessChannelList(ntfc);
				OnChannelList?.Invoke(this, ntfc);
				var ev = OnEachChannelList;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateChannelList(that);
					ProcessEachChannelList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelListFinished: {
				var ntfc = (ChannelListFinished[])ntf;
				ProcessChannelListFinished(ntfc);
				OnChannelListFinished?.Invoke(this, ntfc);
				var ev = OnEachChannelListFinished;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachChannelListFinished(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelMoved: {
				var ntfc = (ChannelMoved[])ntf;
				ProcessChannelMoved(ntfc);
				OnChannelMoved?.Invoke(this, ntfc);
				var ev = OnEachChannelMoved;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateChannelMoved(that);
					ProcessEachChannelMoved(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelPasswordChanged: {
				var ntfc = (ChannelPasswordChanged[])ntf;
				ProcessChannelPasswordChanged(ntfc);
				OnChannelPasswordChanged?.Invoke(this, ntfc);
				var ev = OnEachChannelPasswordChanged;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachChannelPasswordChanged(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelPermissionHints: {
				var ntfc = (ChannelPermissionHints[])ntf;
				ProcessChannelPermissionHints(ntfc);
				OnChannelPermissionHints?.Invoke(this, ntfc);
				var ev = OnEachChannelPermissionHints;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateChannelPermissionHints(that);
					ProcessEachChannelPermissionHints(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelPermList: {
				var ntfc = (ChannelPermList[])ntf;
				ProcessChannelPermList(ntfc);
				OnChannelPermList?.Invoke(this, ntfc);
				var ev = OnEachChannelPermList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachChannelPermList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelSubscribed: {
				var ntfc = (ChannelSubscribed[])ntf;
				ProcessChannelSubscribed(ntfc);
				OnChannelSubscribed?.Invoke(this, ntfc);
				var ev = OnEachChannelSubscribed;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateChannelSubscribed(that);
					ProcessEachChannelSubscribed(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ChannelUnsubscribed: {
				var ntfc = (ChannelUnsubscribed[])ntf;
				ProcessChannelUnsubscribed(ntfc);
				OnChannelUnsubscribed?.Invoke(this, ntfc);
				var ev = OnEachChannelUnsubscribed;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateChannelUnsubscribed(that);
					ProcessEachChannelUnsubscribed(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientChannelGroupChanged: {
				var ntfc = (ClientChannelGroupChanged[])ntf;
				ProcessClientChannelGroupChanged(ntfc);
				OnClientChannelGroupChanged?.Invoke(this, ntfc);
				var ev = OnEachClientChannelGroupChanged;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateClientChannelGroupChanged(that);
					ProcessEachClientChannelGroupChanged(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientChatClosed: {
				var ntfc = (ClientChatClosed[])ntf;
				ProcessClientChatClosed(ntfc);
				OnClientChatClosed?.Invoke(this, ntfc);
				var ev = OnEachClientChatClosed;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientChatClosed(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientChatComposing: {
				var ntfc = (ClientChatComposing[])ntf;
				ProcessClientChatComposing(ntfc);
				OnClientChatComposing?.Invoke(this, ntfc);
				var ev = OnEachClientChatComposing;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientChatComposing(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientConnectionInfo: {
				var ntfc = (ClientConnectionInfo[])ntf;
				ProcessClientConnectionInfo(ntfc);
				OnClientConnectionInfo?.Invoke(this, ntfc);
				var ev = OnEachClientConnectionInfo;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateClientConnectionInfo(that);
					ProcessEachClientConnectionInfo(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientConnectionInfoUpdateRequest: {
				var ntfc = (ClientConnectionInfoUpdateRequest[])ntf;
				ProcessClientConnectionInfoUpdateRequest(ntfc);
				OnClientConnectionInfoUpdateRequest?.Invoke(this, ntfc);
				var ev = OnEachClientConnectionInfoUpdateRequest;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientConnectionInfoUpdateRequest(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientDbFind: {
				var ntfc = (ClientDbFind[])ntf;
				ProcessClientDbFind(ntfc);
				OnClientDbFind?.Invoke(this, ntfc);
				var ev = OnEachClientDbFind;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientDbFind(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientDbIdFromUid: {
				var ntfc = (ClientDbIdFromUid[])ntf;
				ProcessClientDbIdFromUid(ntfc);
				OnClientDbIdFromUid?.Invoke(this, ntfc);
				var ev = OnEachClientDbIdFromUid;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientDbIdFromUid(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientDbList: {
				var ntfc = (ClientDbList[])ntf;
				ProcessClientDbList(ntfc);
				OnClientDbList?.Invoke(this, ntfc);
				var ev = OnEachClientDbList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientDbList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientEnterView: {
				var ntfc = (ClientEnterView[])ntf;
				ProcessClientEnterView(ntfc);
				OnClientEnterView?.Invoke(this, ntfc);
				var ev = OnEachClientEnterView;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateClientEnterView(that);
					ProcessEachClientEnterView(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientIds: {
				var ntfc = (ClientIds[])ntf;
				ProcessClientIds(ntfc);
				OnClientIds?.Invoke(this, ntfc);
				var ev = OnEachClientIds;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientIds(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientLeftView: {
				var ntfc = (ClientLeftView[])ntf;
				ProcessClientLeftView(ntfc);
				OnClientLeftView?.Invoke(this, ntfc);
				var ev = OnEachClientLeftView;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateClientLeftView(that);
					ProcessEachClientLeftView(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientMoved: {
				var ntfc = (ClientMoved[])ntf;
				ProcessClientMoved(ntfc);
				OnClientMoved?.Invoke(this, ntfc);
				var ev = OnEachClientMoved;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateClientMoved(that);
					ProcessEachClientMoved(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientNameFromDbId: {
				var ntfc = (ClientNameFromDbId[])ntf;
				ProcessClientNameFromDbId(ntfc);
				OnClientNameFromDbId?.Invoke(this, ntfc);
				var ev = OnEachClientNameFromDbId;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientNameFromDbId(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientNameFromUid: {
				var ntfc = (ClientNameFromUid[])ntf;
				ProcessClientNameFromUid(ntfc);
				OnClientNameFromUid?.Invoke(this, ntfc);
				var ev = OnEachClientNameFromUid;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientNameFromUid(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientNeededPermissions: {
				var ntfc = (ClientNeededPermissions[])ntf;
				ProcessClientNeededPermissions(ntfc);
				OnClientNeededPermissions?.Invoke(this, ntfc);
				var ev = OnEachClientNeededPermissions;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientNeededPermissions(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientPermissionHints: {
				var ntfc = (ClientPermissionHints[])ntf;
				ProcessClientPermissionHints(ntfc);
				OnClientPermissionHints?.Invoke(this, ntfc);
				var ev = OnEachClientPermissionHints;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateClientPermissionHints(that);
					ProcessEachClientPermissionHints(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientPermList: {
				var ntfc = (ClientPermList[])ntf;
				ProcessClientPermList(ntfc);
				OnClientPermList?.Invoke(this, ntfc);
				var ev = OnEachClientPermList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientPermList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientPoke: {
				var ntfc = (ClientPoke[])ntf;
				ProcessClientPoke(ntfc);
				OnClientPoke?.Invoke(this, ntfc);
				var ev = OnEachClientPoke;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientPoke(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientServerGroupAdded: {
				var ntfc = (ClientServerGroupAdded[])ntf;
				ProcessClientServerGroupAdded(ntfc);
				OnClientServerGroupAdded?.Invoke(this, ntfc);
				var ev = OnEachClientServerGroupAdded;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateClientServerGroupAdded(that);
					ProcessEachClientServerGroupAdded(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientServerGroupRemoved: {
				var ntfc = (ClientServerGroupRemoved[])ntf;
				ProcessClientServerGroupRemoved(ntfc);
				OnClientServerGroupRemoved?.Invoke(this, ntfc);
				var ev = OnEachClientServerGroupRemoved;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateClientServerGroupRemoved(that);
					ProcessEachClientServerGroupRemoved(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientSetServerQueryLogin: {
				var ntfc = (ClientSetServerQueryLogin[])ntf;
				ProcessClientSetServerQueryLogin(ntfc);
				OnClientSetServerQueryLogin?.Invoke(this, ntfc);
				var ev = OnEachClientSetServerQueryLogin;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientSetServerQueryLogin(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientUidFromClid: {
				var ntfc = (ClientUidFromClid[])ntf;
				ProcessClientUidFromClid(ntfc);
				OnClientUidFromClid?.Invoke(this, ntfc);
				var ev = OnEachClientUidFromClid;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachClientUidFromClid(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ClientUpdated: {
				var ntfc = (ClientUpdated[])ntf;
				ProcessClientUpdated(ntfc);
				OnClientUpdated?.Invoke(this, ntfc);
				var ev = OnEachClientUpdated;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateClientUpdated(that);
					ProcessEachClientUpdated(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.CommandError: {
				var ntfc = (CommandError[])ntf;
				ProcessCommandError(ntfc);
				OnCommandError?.Invoke(this, ntfc);
				var ev = OnEachCommandError;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachCommandError(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ComplainList: {
				var ntfc = (ComplainList[])ntf;
				ProcessComplainList(ntfc);
				OnComplainList?.Invoke(this, ntfc);
				var ev = OnEachComplainList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachComplainList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.FileDownload: {
				var ntfc = (FileDownload[])ntf;
				ProcessFileDownload(ntfc);
				OnFileDownload?.Invoke(this, ntfc);
				var ev = OnEachFileDownload;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachFileDownload(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.FileInfo: {
				var ntfc = (FileInfo[])ntf;
				ProcessFileInfo(ntfc);
				OnFileInfo?.Invoke(this, ntfc);
				var ev = OnEachFileInfo;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachFileInfo(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.FileList: {
				var ntfc = (FileList[])ntf;
				ProcessFileList(ntfc);
				OnFileList?.Invoke(this, ntfc);
				var ev = OnEachFileList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachFileList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.FileListFinished: {
				var ntfc = (FileListFinished[])ntf;
				ProcessFileListFinished(ntfc);
				OnFileListFinished?.Invoke(this, ntfc);
				var ev = OnEachFileListFinished;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachFileListFinished(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.FileTransfer: {
				var ntfc = (FileTransfer[])ntf;
				ProcessFileTransfer(ntfc);
				OnFileTransfer?.Invoke(this, ntfc);
				var ev = OnEachFileTransfer;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachFileTransfer(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.FileTransferStatus: {
				var ntfc = (FileTransferStatus[])ntf;
				ProcessFileTransferStatus(ntfc);
				OnFileTransferStatus?.Invoke(this, ntfc);
				var ev = OnEachFileTransferStatus;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachFileTransferStatus(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.FileUpload: {
				var ntfc = (FileUpload[])ntf;
				ProcessFileUpload(ntfc);
				OnFileUpload?.Invoke(this, ntfc);
				var ev = OnEachFileUpload;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachFileUpload(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.InitIvExpand: {
				var ntfc = (InitIvExpand[])ntf;
				ProcessInitIvExpand(ntfc);
				OnInitIvExpand?.Invoke(this, ntfc);
				var ev = OnEachInitIvExpand;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachInitIvExpand(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.InitIvExpand2: {
				var ntfc = (InitIvExpand2[])ntf;
				ProcessInitIvExpand2(ntfc);
				OnInitIvExpand2?.Invoke(this, ntfc);
				var ev = OnEachInitIvExpand2;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachInitIvExpand2(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.InitServer: {
				var ntfc = (InitServer[])ntf;
				ProcessInitServer(ntfc);
				OnInitServer?.Invoke(this, ntfc);
				var ev = OnEachInitServer;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateInitServer(that);
					ProcessEachInitServer(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.OfflineMessage: {
				var ntfc = (OfflineMessage[])ntf;
				ProcessOfflineMessage(ntfc);
				OnOfflineMessage?.Invoke(this, ntfc);
				var ev = OnEachOfflineMessage;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachOfflineMessage(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.OfflineMessageList: {
				var ntfc = (OfflineMessageList[])ntf;
				ProcessOfflineMessageList(ntfc);
				OnOfflineMessageList?.Invoke(this, ntfc);
				var ev = OnEachOfflineMessageList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachOfflineMessageList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.PermFind: {
				var ntfc = (PermFind[])ntf;
				ProcessPermFind(ntfc);
				OnPermFind?.Invoke(this, ntfc);
				var ev = OnEachPermFind;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachPermFind(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.PermList: {
				var ntfc = (PermList[])ntf;
				ProcessPermList(ntfc);
				OnPermList?.Invoke(this, ntfc);
				var ev = OnEachPermList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachPermList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.PermOverview: {
				var ntfc = (PermOverview[])ntf;
				ProcessPermOverview(ntfc);
				OnPermOverview?.Invoke(this, ntfc);
				var ev = OnEachPermOverview;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachPermOverview(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.PluginCommand: {
				var ntfc = (PluginCommand[])ntf;
				ProcessPluginCommand(ntfc);
				OnPluginCommand?.Invoke(this, ntfc);
				var ev = OnEachPluginCommand;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachPluginCommand(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ServerConnectionInfo: {
				var ntfc = (ServerConnectionInfo[])ntf;
				ProcessServerConnectionInfo(ntfc);
				OnServerConnectionInfo?.Invoke(this, ntfc);
				var ev = OnEachServerConnectionInfo;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachServerConnectionInfo(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ServerEdited: {
				var ntfc = (ServerEdited[])ntf;
				ProcessServerEdited(ntfc);
				OnServerEdited?.Invoke(this, ntfc);
				var ev = OnEachServerEdited;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateServerEdited(that);
					ProcessEachServerEdited(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ServerGroupClientList: {
				var ntfc = (ServerGroupClientList[])ntf;
				ProcessServerGroupClientList(ntfc);
				OnServerGroupClientList?.Invoke(this, ntfc);
				var ev = OnEachServerGroupClientList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachServerGroupClientList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ServerGroupList: {
				var ntfc = (ServerGroupList[])ntf;
				ProcessServerGroupList(ntfc);
				OnServerGroupList?.Invoke(this, ntfc);
				var ev = OnEachServerGroupList;
				var book = Book;
				foreach(var that in ntfc) {
					book?.UpdateServerGroupList(that);
					ProcessEachServerGroupList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ServerGroupPermList: {
				var ntfc = (ServerGroupPermList[])ntf;
				ProcessServerGroupPermList(ntfc);
				OnServerGroupPermList?.Invoke(this, ntfc);
				var ev = OnEachServerGroupPermList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachServerGroupPermList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ServerGroupsByClientId: {
				var ntfc = (ServerGroupsByClientId[])ntf;
				ProcessServerGroupsByClientId(ntfc);
				OnServerGroupsByClientId?.Invoke(this, ntfc);
				var ev = OnEachServerGroupsByClientId;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachServerGroupsByClientId(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ServerLog: {
				var ntfc = (ServerLog[])ntf;
				ProcessServerLog(ntfc);
				OnServerLog?.Invoke(this, ntfc);
				var ev = OnEachServerLog;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachServerLog(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ServerTempPasswordList: {
				var ntfc = (ServerTempPasswordList[])ntf;
				ProcessServerTempPasswordList(ntfc);
				OnServerTempPasswordList?.Invoke(this, ntfc);
				var ev = OnEachServerTempPasswordList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachServerTempPasswordList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.ServerUpdated: {
				var ntfc = (ServerUpdated[])ntf;
				ProcessServerUpdated(ntfc);
				OnServerUpdated?.Invoke(this, ntfc);
				var ev = OnEachServerUpdated;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachServerUpdated(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.TextMessage: {
				var ntfc = (TextMessage[])ntf;
				ProcessTextMessage(ntfc);
				OnTextMessage?.Invoke(this, ntfc);
				var ev = OnEachTextMessage;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachTextMessage(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.TokenAdd: {
				var ntfc = (TokenAdd[])ntf;
				ProcessTokenAdd(ntfc);
				OnTokenAdd?.Invoke(this, ntfc);
				var ev = OnEachTokenAdd;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachTokenAdd(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.TokenList: {
				var ntfc = (TokenList[])ntf;
				ProcessTokenList(ntfc);
				OnTokenList?.Invoke(this, ntfc);
				var ev = OnEachTokenList;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachTokenList(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.TokenUsed: {
				var ntfc = (TokenUsed[])ntf;
				ProcessTokenUsed(ntfc);
				OnTokenUsed?.Invoke(this, ntfc);
				var ev = OnEachTokenUsed;
				var book = Book;
				foreach(var that in ntfc) {
					ProcessEachTokenUsed(that);
					ev?.Invoke(this, that);
				}
				break;
			}
			
			case NotificationType.Unknown:
			default:
				throw Tools.UnhandledDefault(lazyNotification.NotifyType);
			}
		}

		partial void ProcessBanList(BanList[] notifies);
		partial void ProcessEachBanList(BanList notifies);
		partial void ProcessChannelChanged(ChannelChanged[] notifies);
		partial void ProcessEachChannelChanged(ChannelChanged notifies);
		partial void ProcessChannelClientPermList(ChannelClientPermList[] notifies);
		partial void ProcessEachChannelClientPermList(ChannelClientPermList notifies);
		partial void ProcessChannelCreated(ChannelCreated[] notifies);
		partial void ProcessEachChannelCreated(ChannelCreated notifies);
		partial void ProcessChannelDeleted(ChannelDeleted[] notifies);
		partial void ProcessEachChannelDeleted(ChannelDeleted notifies);
		partial void ProcessChannelDescriptionChanged(ChannelDescriptionChanged[] notifies);
		partial void ProcessEachChannelDescriptionChanged(ChannelDescriptionChanged notifies);
		partial void ProcessChannelEdited(ChannelEdited[] notifies);
		partial void ProcessEachChannelEdited(ChannelEdited notifies);
		partial void ProcessChannelGroupClientList(ChannelGroupClientList[] notifies);
		partial void ProcessEachChannelGroupClientList(ChannelGroupClientList notifies);
		partial void ProcessChannelGroupList(ChannelGroupList[] notifies);
		partial void ProcessEachChannelGroupList(ChannelGroupList notifies);
		partial void ProcessChannelGroupPermList(ChannelGroupPermList[] notifies);
		partial void ProcessEachChannelGroupPermList(ChannelGroupPermList notifies);
		partial void ProcessChannelList(ChannelList[] notifies);
		partial void ProcessEachChannelList(ChannelList notifies);
		partial void ProcessChannelListFinished(ChannelListFinished[] notifies);
		partial void ProcessEachChannelListFinished(ChannelListFinished notifies);
		partial void ProcessChannelMoved(ChannelMoved[] notifies);
		partial void ProcessEachChannelMoved(ChannelMoved notifies);
		partial void ProcessChannelPasswordChanged(ChannelPasswordChanged[] notifies);
		partial void ProcessEachChannelPasswordChanged(ChannelPasswordChanged notifies);
		partial void ProcessChannelPermissionHints(ChannelPermissionHints[] notifies);
		partial void ProcessEachChannelPermissionHints(ChannelPermissionHints notifies);
		partial void ProcessChannelPermList(ChannelPermList[] notifies);
		partial void ProcessEachChannelPermList(ChannelPermList notifies);
		partial void ProcessChannelSubscribed(ChannelSubscribed[] notifies);
		partial void ProcessEachChannelSubscribed(ChannelSubscribed notifies);
		partial void ProcessChannelUnsubscribed(ChannelUnsubscribed[] notifies);
		partial void ProcessEachChannelUnsubscribed(ChannelUnsubscribed notifies);
		partial void ProcessClientChannelGroupChanged(ClientChannelGroupChanged[] notifies);
		partial void ProcessEachClientChannelGroupChanged(ClientChannelGroupChanged notifies);
		partial void ProcessClientChatClosed(ClientChatClosed[] notifies);
		partial void ProcessEachClientChatClosed(ClientChatClosed notifies);
		partial void ProcessClientChatComposing(ClientChatComposing[] notifies);
		partial void ProcessEachClientChatComposing(ClientChatComposing notifies);
		partial void ProcessClientConnectionInfo(ClientConnectionInfo[] notifies);
		partial void ProcessEachClientConnectionInfo(ClientConnectionInfo notifies);
		partial void ProcessClientConnectionInfoUpdateRequest(ClientConnectionInfoUpdateRequest[] notifies);
		partial void ProcessEachClientConnectionInfoUpdateRequest(ClientConnectionInfoUpdateRequest notifies);
		partial void ProcessClientDbFind(ClientDbFind[] notifies);
		partial void ProcessEachClientDbFind(ClientDbFind notifies);
		partial void ProcessClientDbIdFromUid(ClientDbIdFromUid[] notifies);
		partial void ProcessEachClientDbIdFromUid(ClientDbIdFromUid notifies);
		partial void ProcessClientDbList(ClientDbList[] notifies);
		partial void ProcessEachClientDbList(ClientDbList notifies);
		partial void ProcessClientEnterView(ClientEnterView[] notifies);
		partial void ProcessEachClientEnterView(ClientEnterView notifies);
		partial void ProcessClientIds(ClientIds[] notifies);
		partial void ProcessEachClientIds(ClientIds notifies);
		partial void ProcessClientLeftView(ClientLeftView[] notifies);
		partial void ProcessEachClientLeftView(ClientLeftView notifies);
		partial void ProcessClientMoved(ClientMoved[] notifies);
		partial void ProcessEachClientMoved(ClientMoved notifies);
		partial void ProcessClientNameFromDbId(ClientNameFromDbId[] notifies);
		partial void ProcessEachClientNameFromDbId(ClientNameFromDbId notifies);
		partial void ProcessClientNameFromUid(ClientNameFromUid[] notifies);
		partial void ProcessEachClientNameFromUid(ClientNameFromUid notifies);
		partial void ProcessClientNeededPermissions(ClientNeededPermissions[] notifies);
		partial void ProcessEachClientNeededPermissions(ClientNeededPermissions notifies);
		partial void ProcessClientPermissionHints(ClientPermissionHints[] notifies);
		partial void ProcessEachClientPermissionHints(ClientPermissionHints notifies);
		partial void ProcessClientPermList(ClientPermList[] notifies);
		partial void ProcessEachClientPermList(ClientPermList notifies);
		partial void ProcessClientPoke(ClientPoke[] notifies);
		partial void ProcessEachClientPoke(ClientPoke notifies);
		partial void ProcessClientServerGroupAdded(ClientServerGroupAdded[] notifies);
		partial void ProcessEachClientServerGroupAdded(ClientServerGroupAdded notifies);
		partial void ProcessClientServerGroupRemoved(ClientServerGroupRemoved[] notifies);
		partial void ProcessEachClientServerGroupRemoved(ClientServerGroupRemoved notifies);
		partial void ProcessClientSetServerQueryLogin(ClientSetServerQueryLogin[] notifies);
		partial void ProcessEachClientSetServerQueryLogin(ClientSetServerQueryLogin notifies);
		partial void ProcessClientUidFromClid(ClientUidFromClid[] notifies);
		partial void ProcessEachClientUidFromClid(ClientUidFromClid notifies);
		partial void ProcessClientUpdated(ClientUpdated[] notifies);
		partial void ProcessEachClientUpdated(ClientUpdated notifies);
		partial void ProcessCommandError(CommandError[] notifies);
		partial void ProcessEachCommandError(CommandError notifies);
		partial void ProcessComplainList(ComplainList[] notifies);
		partial void ProcessEachComplainList(ComplainList notifies);
		partial void ProcessFileDownload(FileDownload[] notifies);
		partial void ProcessEachFileDownload(FileDownload notifies);
		partial void ProcessFileInfo(FileInfo[] notifies);
		partial void ProcessEachFileInfo(FileInfo notifies);
		partial void ProcessFileList(FileList[] notifies);
		partial void ProcessEachFileList(FileList notifies);
		partial void ProcessFileListFinished(FileListFinished[] notifies);
		partial void ProcessEachFileListFinished(FileListFinished notifies);
		partial void ProcessFileTransfer(FileTransfer[] notifies);
		partial void ProcessEachFileTransfer(FileTransfer notifies);
		partial void ProcessFileTransferStatus(FileTransferStatus[] notifies);
		partial void ProcessEachFileTransferStatus(FileTransferStatus notifies);
		partial void ProcessFileUpload(FileUpload[] notifies);
		partial void ProcessEachFileUpload(FileUpload notifies);
		partial void ProcessInitIvExpand(InitIvExpand[] notifies);
		partial void ProcessEachInitIvExpand(InitIvExpand notifies);
		partial void ProcessInitIvExpand2(InitIvExpand2[] notifies);
		partial void ProcessEachInitIvExpand2(InitIvExpand2 notifies);
		partial void ProcessInitServer(InitServer[] notifies);
		partial void ProcessEachInitServer(InitServer notifies);
		partial void ProcessOfflineMessage(OfflineMessage[] notifies);
		partial void ProcessEachOfflineMessage(OfflineMessage notifies);
		partial void ProcessOfflineMessageList(OfflineMessageList[] notifies);
		partial void ProcessEachOfflineMessageList(OfflineMessageList notifies);
		partial void ProcessPermFind(PermFind[] notifies);
		partial void ProcessEachPermFind(PermFind notifies);
		partial void ProcessPermList(PermList[] notifies);
		partial void ProcessEachPermList(PermList notifies);
		partial void ProcessPermOverview(PermOverview[] notifies);
		partial void ProcessEachPermOverview(PermOverview notifies);
		partial void ProcessPluginCommand(PluginCommand[] notifies);
		partial void ProcessEachPluginCommand(PluginCommand notifies);
		partial void ProcessServerConnectionInfo(ServerConnectionInfo[] notifies);
		partial void ProcessEachServerConnectionInfo(ServerConnectionInfo notifies);
		partial void ProcessServerEdited(ServerEdited[] notifies);
		partial void ProcessEachServerEdited(ServerEdited notifies);
		partial void ProcessServerGroupClientList(ServerGroupClientList[] notifies);
		partial void ProcessEachServerGroupClientList(ServerGroupClientList notifies);
		partial void ProcessServerGroupList(ServerGroupList[] notifies);
		partial void ProcessEachServerGroupList(ServerGroupList notifies);
		partial void ProcessServerGroupPermList(ServerGroupPermList[] notifies);
		partial void ProcessEachServerGroupPermList(ServerGroupPermList notifies);
		partial void ProcessServerGroupsByClientId(ServerGroupsByClientId[] notifies);
		partial void ProcessEachServerGroupsByClientId(ServerGroupsByClientId notifies);
		partial void ProcessServerLog(ServerLog[] notifies);
		partial void ProcessEachServerLog(ServerLog notifies);
		partial void ProcessServerTempPasswordList(ServerTempPasswordList[] notifies);
		partial void ProcessEachServerTempPasswordList(ServerTempPasswordList notifies);
		partial void ProcessServerUpdated(ServerUpdated[] notifies);
		partial void ProcessEachServerUpdated(ServerUpdated notifies);
		partial void ProcessTextMessage(TextMessage[] notifies);
		partial void ProcessEachTextMessage(TextMessage notifies);
		partial void ProcessTokenAdd(TokenAdd[] notifies);
		partial void ProcessEachTokenAdd(TokenAdd notifies);
		partial void ProcessTokenList(TokenList[] notifies);
		partial void ProcessEachTokenList(TokenList notifies);
		partial void ProcessTokenUsed(TokenUsed[] notifies);
		partial void ProcessEachTokenUsed(TokenUsed notifies);
		
	}
}