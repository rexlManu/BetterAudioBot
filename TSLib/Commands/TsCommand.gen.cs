// TSLib - A free TeamSpeak 3 and 5 client library
// Copyright (C) 2017  TSLib contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.
// <auto-generated />









using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace TSLib.Commands
{
	partial class TsCommand
	{

		[DebuggerStepThrough] public TsCommand Add(string key, bool? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, bool value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<bool> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, sbyte? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, sbyte value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<sbyte> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, byte? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, byte value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<byte> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, short? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, short value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<short> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, ushort? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, ushort value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<ushort> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, int? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, int value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<int> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, uint? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, uint value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<uint> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, long? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, long value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<long> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, ulong? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, ulong value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<ulong> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, float? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, float value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<float> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, double? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, double value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<double> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, string value) { if(value != null) Add(new CommandParameter(key, value)); return this; }

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<string> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, DateTime? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, DateTime value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<DateTime> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, Uid? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, Uid value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<Uid> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, ClientDbId? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, ClientDbId value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<ClientDbId> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, ClientId? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, ClientId value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<ClientId> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, ChannelId? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, ChannelId value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<ChannelId> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, ServerGroupId? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, ServerGroupId value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<ServerGroupId> value) => Add(new CommandMultiParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, ChannelGroupId? value) { if(value.HasValue) return Add(key, value.Value); return this; }
		[DebuggerStepThrough] public TsCommand Add(string key, ChannelGroupId value) => Add(new CommandParameter(key, value));

		[DebuggerStepThrough] public TsCommand Add(string key, IEnumerable<ChannelGroupId> value) => Add(new CommandMultiParameter(key, value));

	}

	partial class CommandParameter
	{

		[DebuggerStepThrough] public CommandParameter(string key, bool value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, sbyte value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, byte value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, short value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, ushort value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, int value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, uint value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, long value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, ulong value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, float value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, double value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, string value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, DateTime value) { Key = key; Value = Serialize(value); }

		[DebuggerStepThrough] public CommandParameter(string key, Uid value) { Key = key; Value = Serialize(value.Value); }

		[DebuggerStepThrough] public CommandParameter(string key, ClientDbId value) { Key = key; Value = Serialize(value.Value); }

		[DebuggerStepThrough] public CommandParameter(string key, ClientId value) { Key = key; Value = Serialize(value.Value); }

		[DebuggerStepThrough] public CommandParameter(string key, ChannelId value) { Key = key; Value = Serialize(value.Value); }

		[DebuggerStepThrough] public CommandParameter(string key, ServerGroupId value) { Key = key; Value = Serialize(value.Value); }

		[DebuggerStepThrough] public CommandParameter(string key, ChannelGroupId value) { Key = key; Value = Serialize(value.Value); }

	}

	partial class CommandMultiParameter
	{

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<bool> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<sbyte> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<byte> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<short> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<ushort> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<int> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<uint> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<long> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<ulong> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<float> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<double> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<string> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<DateTime> value) { Key = key; Values = value.Select(CommandParameter.Serialize).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<Uid> value) { Key = key; Values = value.Select(v => CommandParameter.Serialize(v.Value)).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<ClientDbId> value) { Key = key; Values = value.Select(v => CommandParameter.Serialize(v.Value)).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<ClientId> value) { Key = key; Values = value.Select(v => CommandParameter.Serialize(v.Value)).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<ChannelId> value) { Key = key; Values = value.Select(v => CommandParameter.Serialize(v.Value)).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<ServerGroupId> value) { Key = key; Values = value.Select(v => CommandParameter.Serialize(v.Value)).ToArray(); }

		[DebuggerStepThrough] public CommandMultiParameter(string key, IEnumerable<ChannelGroupId> value) { Key = key; Values = value.Select(v => CommandParameter.Serialize(v.Value)).ToArray(); }

	}
}